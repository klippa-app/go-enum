// Code generated by go-enum, DO NOT EDIT.
package {{ $.Pkg }}

import (
	"fmt"
)

{{- $t := $.EnumName }}
{{- $lt := receiver $t }}
{{- $allFn := print  "All" (pascal ( plural $t )) "()"}}
{{- $validFn := print "valid" (pascal ( plural $t )) "()"}}
{{- $FromString := print (pascal ( $t )) "FromString"}}

func {{ $allFn }} []{{ $t }} {
	return []{{ $t }}{
	{{- range $index, $enum := $.EnumValues }}
		{{ $enum.Name }},
	{{- end }}
	}
}

func {{ $validFn }} []{{ $t }} {
	return []{{ $t }}{
	{{- range $index, $enum := $.EnumValues }}
	{{- if not (containsString $enum.Options "invalid") }}
		{{ $enum.Name }},
	{{- end }}
	{{- end }}
	}
}

func To{{ $t }}(value {{ $.BaseType }}) {{ $t }} {
	{{ $lt }} := {{ $t }}(value)
	switch {{ $lt }} {
	case {{ range $index, $enum := $.EnumValues }}{{ if not (eq $index 0) }}, {{ end }}{{ $enum.Name }}{{ end }}:
		return {{ $lt }}
	default:
	{{- if $default := $.EnumDefaultValue }}
		return {{ $default }}
	{{- else }}
		panic(fmt.Sprintf("no default for enum %v", {{ $lt }}))
	{{- end }}
	}
}
{{ if not $.Config.Generate.NoStringer }}
func ({{ $lt }} {{ $t }}) String() string {
	switch {{ $lt }} {
	{{- range $index, $enum := $.EnumValues }}
	case {{ $enum.Name }}:
	{{- if eq $.BaseType "string" }}
		return {{ $enum.Value }} 
	{{- else }}
		return "{{ stringer $enum.Name }}"
	{{- end }}
	{{- end }}
	default:
	{{- if $default := $.EnumDefaultValue }}
		return {{ $default }}.String()
	{{- else }}
		panic(fmt.Sprintf("no default for enum %T, invalid value: '%#v'", {{ $lt }}, {{ $lt }}))
	{{- end }}
	}
}
{{ end }}
func {{ $FromString }}(val string) (*{{ $t }}, error) {
	valid := {{ $validFn }}
	for i := range valid {
		if valid[i].String() == val {
			return &valid[i], nil
		}
	}

	return nil, fmt.Errorf("%s is not a valid {{ $t }}", val)
}

func ({{ $lt }} {{ $t }}) Validate() error {
	_, err := {{ $FromString }}({{ $lt }}.String())
	return err
}
