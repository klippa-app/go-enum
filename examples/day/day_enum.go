// Code generated by go-enum, DO NOT EDIT.
package day

import (
	"fmt"
)

func AllDays() []Day {
	return []Day{
		Unknown,
		Monday,
		Tuesday,
		Wednesday,
		Thursday,
		Friday,
		Saturday,
		Sunday,
	}
}

func validDays() []Day {
	return []Day{
		Monday,
		Tuesday,
		Wednesday,
		Thursday,
		Friday,
		Saturday,
		Sunday,
	}
}

func ToDay(value int) Day {
	day_enum := Day(value)
	switch day_enum {
	case Unknown, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday:
		return day_enum
	default:
		panic(fmt.Sprintf("no default for enum %v", day_enum))
	}
}

func (day_enum Day) String() string {
	switch day_enum {
	case Unknown:
		return "UNKNOWN"
	case Monday:
		return "MONDAY"
	case Tuesday:
		return "TUESDAY"
	case Wednesday:
		return "WEDNESDAY"
	case Thursday:
		return "THURSDAY"
	case Friday:
		return "FRIDAY"
	case Saturday:
		return "SATURDAY"
	case Sunday:
		return "SUNDAY"
	default:
		panic(fmt.Sprintf("no default for enum %T, invalid value: '%#v'", day_enum, day_enum))
	}
}

func DayFromString(val string) (*Day, error) {
	valid := validDays()	
	for i := range valid {
		if valid[i].String() == val {
			return &valid[i], nil
		}
	}	

	return nil, fmt.Errorf("%s is not a valid Day", val)
}

func (day_enum Day) Validate() error {
	_, err := DayFromString(day_enum.String())
	return err
}
