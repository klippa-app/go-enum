// Code generated by go-enum, DO NOT EDIT.
package multiple

import (
	"fmt"
)

func AllBiscuits() []Biscuit {
	return []Biscuit{
		BiscuitDigestive,
		BiscuitHobnob,
		BiscuitNice,
		BiscuitJammieDodger,
		BiscuitShortbread,
		BiscuitGingerNut,
	}
}

func validBiscuits() []Biscuit {
	return []Biscuit{
		BiscuitDigestive,
		BiscuitHobnob,
		BiscuitNice,
		BiscuitJammieDodger,
		BiscuitShortbread,
		BiscuitGingerNut,
	}
}

func ToBiscuit(value int) Biscuit {
	biscuit_enum := Biscuit(value)
	switch biscuit_enum {
	case BiscuitDigestive, BiscuitHobnob, BiscuitNice, BiscuitJammieDodger, BiscuitShortbread, BiscuitGingerNut:
		return biscuit_enum
	default:
		return BiscuitDigestive
	}
}

func (biscuit_enum Biscuit) String() string {
	switch biscuit_enum {
	case BiscuitDigestive:
		return "digestive"
	case BiscuitHobnob:
		return "hobnob"
	case BiscuitNice:
		return "nice"
	case BiscuitJammieDodger:
		return "jammie_dodger"
	case BiscuitShortbread:
		return "shortbread"
	case BiscuitGingerNut:
		return "ginger_nut"
	default:
		return BiscuitDigestive.String()
	}
}

func BiscuitFromString(val string) (*Biscuit, error) {
	valid := validBiscuits()
	for i := range valid {
		if valid[i].String() == val {
			return &valid[i], nil
		}
	}

	return nil, fmt.Errorf("%s is not a valid Biscuit", val)
}

func (biscuit_enum Biscuit) Validate() error {
	_, err := BiscuitFromString(biscuit_enum.String())
	return err
}
